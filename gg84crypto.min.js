async function process(){const mode = document.getElementById("modeSelect").value;if(mode === "encrypt"){encryptFile();}else{decryptFile();}}function togglePassword(){const pwd = document.getElementById("passwordInput");pwd.type = pwd.type === "password" ? "text":"password";}function validatePassword(pwd){return pwd.length >= 12 && /[A-Z]/.test(pwd)&& /[a-z]/.test(pwd)&& /[0-9]/.test(pwd)&& /[^A-Za-z0-9]/.test(pwd);}async function encryptFile(){const file = document.getElementById('fileInput').files[0];const password = document.getElementById('passwordInput').value;const messageDiv = document.getElementById('message');messageDiv.innerText = '';if(!file){messageDiv.innerText = "Seleziona un file.";return;}if(!validatePassword(password)){messageDiv.innerText = "Password troppo debole.";return;}const fileBuffer = await file.arrayBuffer();const salt = window.crypto.getRandomValues(new Uint8Array(16));const iv = window.crypto.getRandomValues(new Uint8Array(12));const keyMaterial = await getKeyMaterial(password);const key = await deriveKey(keyMaterial,salt);try{const encrypted = await window.crypto.subtle.encrypt({name:"AES-GCM",iv:iv},key,fileBuffer);const result ={filename:file.name,salt:arrayBufferToBase64(salt),iv:arrayBufferToBase64(iv),ciphertext:arrayBufferToBase64(encrypted)};const blob = new Blob([JSON.stringify(result)],{type:"application/json"});const a = document.createElement("a");a.href = URL.createObjectURL(blob);a.download = "documento_protetto_001.gg84";a.click();messageDiv.innerText = "✅ File cifrato con successo.";}catch(e){messageDiv.innerText = "Errore durante la cifratura.";console.error(e);}}async function decryptFile(){const file = document.getElementById('fileInput').files[0];const password = document.getElementById('passwordInput').value;const messageDiv = document.getElementById('message');messageDiv.innerText = '';if(!file || password.length < 1){messageDiv.innerText = "File o password mancanti.";return;}try{const content = await file.text();const json = JSON.parse(content);const salt = base64ToArrayBuffer(json.salt);const iv = base64ToArrayBuffer(json.iv);const ciphertext = base64ToArrayBuffer(json.ciphertext);const filename = json.filename || "documento_ripristinato";const keyMaterial = await getKeyMaterial(password);const key = await deriveKey(keyMaterial,salt);const decrypted = await window.crypto.subtle.decrypt({name:"AES-GCM",iv:iv},key,ciphertext);const blob = new Blob([decrypted]);const a = document.createElement("a");a.href = URL.createObjectURL(blob);a.download = filename;a.click();messageDiv.innerText = "✅ File decifrato correttamente.";}catch(e){messageDiv.innerText = "❌ Password errata o file danneggiato.";console.error(e);}}async function getKeyMaterial(password){let enc = new TextEncoder();return window.crypto.subtle.importKey("raw",enc.encode(password),"PBKDF2",false,["deriveKey"]);}async function deriveKey(material,salt){return window.crypto.subtle.deriveKey({name:"PBKDF2",salt:salt,iterations:100000,hash:"SHA-256"},material,{name:"AES-GCM",length:256},false,["encrypt","decrypt"]);}function arrayBufferToBase64(buffer){let binary = '';const bytes = new Uint8Array(buffer);bytes.forEach((b)=> binary += String.fromCharCode(b));return window.btoa(binary);}function base64ToArrayBuffer(base64){const binary_string = window.atob(base64);const len = binary_string.length;const bytes = new Uint8Array(len);for(let i = 0;i < len;i++){bytes[i] = binary_string.charCodeAt(i);}return bytes.buffer;}